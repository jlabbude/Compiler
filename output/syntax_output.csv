"<Rule>","Production"
"<Program>","<Struct> "
"<Struct>","Token(ReservedWord(Struct)) Token(Identifier(""Struc"")) Token(Separator(OpenCurlyBraces)) <StructBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<StructBody>","DataType(Int) Token(Identifier(""field"")) <StructBody> "
"<StructBody>","Token(Separator(Comma)) <StructBody> "
"<StructBody>","DataType(Str) Token(Identifier(""field2"")) <StructBody> "
"<StructBody>","ε "
"<Program>","<Enum> "
"<Enum>","Token(ReservedWord(Enum)) Token(Identifier(""Enum"")) Token(Separator(OpenCurlyBraces)) <EnumBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<EnumBody>","Token(Identifier(""Variant1"")) <EnumBody> "
"<EnumBody>","Token(Separator(Comma)) <EnumBody> "
"<EnumBody>","Token(Identifier(""Variant2"")) <EnumBody> "
"<EnumBody>","ε "
"<Program>","<Func> "
"<Func>","Token(ReservedWord(Function)) DataType(Int) Token(Identifier(""test"")) Token(Separator(OpenParenthesis)) <FuncArgument> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <FuncBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<FuncArgument>","DataType(Int) Token(Identifier(""var"")) <FuncArgument> "
"<FuncArgument>","Token(Separator(Comma)) DataType(Float) Token(Identifier(""va2"")) <FuncArgument> "
"<FuncArgument>","ε "
"<FuncBody>","<StmntList> "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Identifier(""Enum"")) Token(Identifier(""enumeracao"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","UnaryOperator <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Str) Token(Identifier(""var3"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Str(Str { open_quote: StringQuotation, content: ""teste"", close_quote: StringQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Char) Token(Identifier(""var4"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""compare"")) <ExprCall> "
"<ExprCall>","<ExprFuncCall> <ExprCall> "
"<ExprFuncCall>","Token(Separator(OpenParenthesis)) <ExprFuncCallArgs> Token(Separator(CloseParenthesis)) "
"<ExprFuncCallArgs>","<Expr> <ExprFuncCallArgs> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '1', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<ExprFuncCallArgs>","Token(Separator(Comma)) <Expr> <ExprFuncCallArgs> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '2', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<ExprFuncCallArgs>","ε "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Float) Token(Identifier(""var5"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Float(2.0))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Int) Token(Identifier(""var6"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""array"")) <ExprCall> "
"<ExprCall>","<ExprArrayAccess> <ExprCall> "
"<ExprArrayAccess>","Token(Separator(OpenBrackets)) <Expr> Token(Separator(CloseBrackets)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<ExprCall>","<ExprArrayAccess> <ExprCall> "
"<ExprArrayAccess>","Token(Separator(OpenBrackets)) <Expr> Token(Separator(CloseBrackets)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(0))) "
"<ExprOperation>","ε "
"<ExprCall>","<ExprArrayAccess> <ExprCall> "
"<ExprArrayAccess>","Token(Separator(OpenBrackets)) <Expr> Token(Separator(CloseBrackets)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""struc"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","<ExprFieldAccess> <ExprCall> "
"<ExprFieldAccess>","Token(Separator(Dot)) "
"<ExprCall>","Token(Identifier(""field"")) <ExprCall> "
"<ExprCall>","<ExprArrayAccess> <ExprCall> "
"<ExprArrayAccess>","Token(Separator(OpenBrackets)) <Expr> Token(Separator(CloseBrackets)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(0))) "
"<ExprOperation>","ε "
"<ExprCall>","<ExprFieldAccess> <ExprCall> "
"<ExprFieldAccess>","Token(Separator(Dot)) "
"<ExprCall>","Token(Identifier(""field2"")) <ExprCall> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""struc"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","<ExprFieldAccess> <ExprCall> "
"<ExprFieldAccess>","Token(Separator(Dot)) "
"<ExprCall>","Token(Identifier(""field2"")) <ExprCall> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Str) Token(Identifier(""var"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""function"")) <ExprCall> "
"<ExprCall>","<ExprFuncCall> <ExprCall> "
"<ExprFuncCall>","Token(Separator(OpenParenthesis)) <ExprFuncCallArgs> Token(Separator(CloseParenthesis)) "
"<ExprFuncCallArgs>","<Expr> <ExprFuncCallArgs> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""struc"")) <ExprCall> "
"<ExprCall>","<ExprFieldAccess> <ExprCall> "
"<ExprFieldAccess>","Token(Separator(Dot)) "
"<ExprCall>","Token(Identifier(""field"")) <ExprCall> "
"<ExprCall>","<ExprArrayAccess> <ExprCall> "
"<ExprArrayAccess>","Token(Separator(OpenBrackets)) <Expr> Token(Separator(CloseBrackets)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(0))) "
"<ExprOperation>","ε "
"<ExprCall>","<ExprFieldAccess> <ExprCall> "
"<ExprFieldAccess>","Token(Separator(Dot)) "
"<ExprCall>","Token(Identifier(""infield"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<ExprFuncCallArgs>","Token(Separator(Comma)) <Expr> <ExprFuncCallArgs> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Bool(True))) "
"<ExprOperation>","ε "
"<ExprFuncCallArgs>","Token(Separator(Comma)) <Expr> <ExprFuncCallArgs> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Bool(False))) "
"<ExprOperation>","ε "
"<ExprFuncCallArgs>","ε "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<Program>","<Func> "
"<Func>","Token(ReservedWord(Function)) DataType(Char) Token(Identifier(""compare"")) Token(Separator(OpenParenthesis)) <FuncArgument> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <FuncBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<FuncArgument>","DataType(Char) Token(Identifier(""a"")) <FuncArgument> "
"<FuncArgument>","Token(Separator(Comma)) DataType(Char) Token(Identifier(""b"")) <FuncArgument> "
"<FuncArgument>","ε "
"<FuncBody>","<StmntList> "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Constant)) DataType(Char) Token(Identifier(""c"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '0', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(For)) Token(Separator(OpenParenthesis)) <StmntDecl> Token(Separator(Terminator)) <Expr> Token(Separator(Terminator)) <StmntAssign> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Int) Token(Identifier(""i"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(0))) "
"<ExprOperation>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""i"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","UnaryOperator <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(10))) "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntAssign>","Token(Identifier(""i"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""a"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(While)) Token(Separator(OpenParenthesis)) <Expr> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","UnaryOperator <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""b"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""a"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(Match)) Token(Separator(OpenParenthesis)) <Expr> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <StmntCase> Token(Separator(CloseCurlyBraces)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntCase>","Token(ReservedWord(Case)) Token(Literal(Char(Char { open_quote: CharQuotation, content: '1', close_quote: CharQuotation }))) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) <StmntCase> "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""a"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '1', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntCase>","Token(ReservedWord(Case)) Token(Literal(Char(Char { open_quote: CharQuotation, content: '2', close_quote: CharQuotation }))) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) <StmntCase> "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""a"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '2', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntCase>","Token(ReservedWord(Default)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""a"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Char(Char { open_quote: CharQuotation, content: '3', close_quote: CharQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(If)) Token(Separator(OpenParenthesis)) <Expr> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) <StmntElse> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","UnaryOperator <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""b"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(Return)) <Expr> Token(Separator(Terminator)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntElse>","Token(ReservedWord(Elif)) Token(Separator(OpenParenthesis)) <Expr> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) <StmntElse> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""a"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","UnaryOperator <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""b"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(Return)) <Expr> Token(Separator(Terminator)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""b"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntElse>","Token(ReservedWord(Else)) Token(Separator(OpenCurlyBraces)) <StmntList> Token(Separator(CloseCurlyBraces)) "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","Token(ReservedWord(Return)) <Expr> Token(Separator(Terminator)) "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Identifier(""c"")) <ExprCall> "
"<ExprCall>","ε "
"<ExprOperation>","ε "
"<StmntList>","ε "
"<StmntList>","ε "
