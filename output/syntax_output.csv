"<Rule>","Production"
"<Program>","<Enum> "
"<Enum>","Token(ReservedWord(Enum)) Token(Identifier(""Enum"")) Token(Separator(OpenCurlyBraces)) <EnumBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<EnumBody>","Token(Identifier(""Variant1"")) <EnumBody> "
"<EnumBody>","Token(Separator(Comma)) <EnumBody> "
"<EnumBody>","Token(Identifier(""Variant2"")) <EnumBody> "
"<EnumBody>","ε "
"<Program>","<Struct> "
"<Struct>","Token(ReservedWord(Struct)) Token(Identifier(""Estructurinha"")) Token(Separator(OpenCurlyBraces)) <StructBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<StructBody>","DataType(Int) Token(Identifier(""wa"")) <StructBody> "
"<StructBody>","Token(Separator(Comma)) <StructBody> "
"<StructBody>","ε "
"<Program>","<Func> "
"<Func>","Token(ReservedWord(Function)) DataType(Int) Token(Identifier(""test"")) Token(Separator(OpenParenthesis)) <FuncArgument> Token(Separator(CloseParenthesis)) Token(Separator(OpenCurlyBraces)) <FuncBody> Token(Separator(CloseCurlyBraces)) <Program> "
"<FuncArgument>","ε "
"<FuncBody>","<StmntList> "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntDecl> Token(Separator(Terminator)) "
"<StmntDecl>","Token(ReservedWord(Let)) DataType(Int) Token(Identifier(""pedor"")) Token(Operator(Assignment)) <Expr> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","UnaryOperator(Sum) <Expr> <ExprOperation> "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""pedor"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Str(Str { open_quote: StringQuotation, content: ""string"", close_quote: StringQuotation }))) "
"<ExprOperation>","ε "
"<StmntList>","<Statement> <StmntList> "
"<Statement>","<StmntAssign> Token(Separator(Terminator)) "
"<StmntAssign>","Token(Identifier(""Pedor"")) <ExprCall> ReassignOp <Expr> "
"<ExprCall>","ε "
"<Expr>","<ExprOperand> <ExprOperation> "
"<ExprOperand>","Token(Literal(Int(1))) "
"<ExprOperation>","ε "
"<StmntList>","ε "
